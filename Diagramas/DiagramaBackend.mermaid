classDiagram

%% --- Clases del servidor ---
class WebServer {
  +POST /register
  +POST /login
  +GET /cards
  +GET, POST /decks
  +DELETE /decks/:deck_id
  +POST /decks/:deck_id/cards
  +GET, POST /matches
  +POST /matches/:match_id/join
  +GET /matches/current
  +POST /matches/action
  +GET /debug/matches
}

%% --- DAO: Acceso a datos ---
class DAOUsers {
  +addUser(username, password, email)
  +getUserByID(user_id)
  +getUserByUsernameAndPassword(username, password)
}

class DAOCards {
  +getAvailableCards()
}

class DAODecks {
  +getDecksByUser(user_id)
  +addDeck(user_id, name)
  +deleteDeck(deck_id, user_id)
  +getDeckByID(deck_id)
  +getCardsByDeck(deck_id)
  +addCardToDeck(deck_id, card_id, quantity)
}

class DAOMatches {
  +getWaitingMatches()
  +getPlayerMatches(user_id)
  +createMatch(user_id, deck_id)
  +joinMatch(match_id, user_id, deck_id)
  +getMatchState(match_id, user_id)
  +endTurn(match_id, user_id)
  +playCard(match_id, user_id, card_id)
}

%% --- Entidades (datos) ---
class User {
  +id: int
  +username: string
  +password: string
  +email: string
}

class Card {
  +id: int
  +name: string
  +type: string
  +effect: string
  +quantity: int
}

class Deck {
  +id: int
  +name: string
  +user_id: int
}

class Match {
  +id: int
  +player1_id: int
  +player2_id: int?
  +player1_deck_id: int
  +player2_deck_id: int?
  +current_turn: int
  +status: string
}

class DeckCard {
  +deck_id: int
  +card_id: int
  +quantity: int
}

%% --- Relaciones ---
WebServer --> DAOUsers : usa
WebServer --> DAOCards : usa
WebServer --> DAODecks : usa
WebServer --> DAOMatches : usa

DAOUsers --> User : gestiona
DAOCards --> Card : gestiona
DAODecks --> Deck : gestiona
DAODecks --> DeckCard : gestiona
DAOMatches --> Match : gestiona

Deck --> DeckCard : contiene
DeckCard --> Card : referencia
Match --> Deck : usa
Match --> User : jugadores
